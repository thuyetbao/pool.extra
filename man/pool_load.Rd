% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pool_load.R
\name{pool_load}
\alias{pool_load}
\title{Pool Load}
\usage{
pool_load(
  pool,
  df,
  capsule = base::tempdir(check = FALSE),
  delim = "\\t",
  .enclosed = "\\"",
  .terminated = "\\n",
  header = TRUE,
  .duplicate = "replace",
  table,
  column = NULL,
  user = NULL,
  .user_config = file.path("config.yml"),
  destination = Sys.getenv("DATABASE_DIRECTORY"),
  local = TRUE,
  load_local = TRUE,
  clean_afterward = TRUE,
  auto_relocate = TRUE
)
}
\arguments{
\item{pool}{[environment] pool connection that summon by `pool_call()`}

\item{df}{[object] any objects but prefers to data.frame, object that not has `data.frame` class needed to parse back data.frame}

\item{capsule}{[path] operation system folder path that will transfer file to, default is temporary folder in `/tmp/` directly in folder
You can specify different folder path but make sure database user can access that folder to get file}

\item{.duplicate}{[character] default to `replace`, handling duplicate-key records, choose one of `replace` or `ignore`}

\item{table}{[character] table that transfer data}

\item{column}{[character] column, default is NULL that will push all columns of data.frame}

\item{clean_afterward}{[boolean] default is TRUE, delete folder that will transfer data to not remain garbage on server}

\item{auto_relocate}{[boolean] default is TRUE, auto-relocate columns positions in dataframe to match with columns in database.}

\item{local_load}{[boolean] default is TRUE, using local specific folder to the root server}
}
\description{
implement LOAD DATA INFILE of MySQL with pool management
}
\details{
# Benefit
LOAD DATA INFILE has various benefits and is one of alternative way to upload data into database:
1. Enhancement upload time, can be more than >100x to INSERT
2. Use background server so that it' not harm another services that working on, such as R-session

The reason behinds of LOAD DATA INFILE that make it more powerful and very fast because:
1. There is no parsing of SQL data is read in big blocks.

# Short-fall of LOAD DATA comes:

1. Rely heavily on System Infrastructure.
2. Various control FILE both for server and database config.
3. Securities problem details in \url{https://dev.mysql.com/doc/refman/8.0/en/load-data-local-security.html}

# Technical Implementation:
1. Configuration
a) For Database
- Assign FILE privileges for user that upload
---
# Perform the following command as a privileged user (root).
# ----
# GRANT FILE ON *.* TO user@localhost;
# An alternative way of performing the same operation involves updating one of the MySQL server tables as follows:
# UPDATE mysql.user SET File_priv = 'Y' WHERE Host = 'localhost' AND User = 'user'; FLUSH PRIVILEGES;
---
b) For System Folder
File Access for file or folder that put the file in
---
Super User need to assign mod 666 or 777 to folder storage file with -r flags
---

1. Transfer file to `/tmp/` folder that any user can access, for database user too
2. Need validate objects with the target table in database
3. Execute LOAD DATA INFINE with local arguments is TRUE

# Data Types

An empty field value is interpreted different from a missing field:

For string types, the column is set to the empty string.

For numeric types, the column is set to 0.

For date and time types, the column is set to the appropriate “zero” value for the type. See Section 11.2, “Date and Time Data Types”.

# Server Option Description
innodb_buffer_pool_size	Increase this if you have many indexes in InnoDB/XtraDB tables
key_buffer_size	Increase this if you have many indexes in MyISAM tables
max_allowed_packet	Increase this to allow bigger multi-insert statements
read_buffer_size	Read block size when reading a file with LOAD DATA
The access denied error could mean that:

# Common Error
1. FILE privileges
'user'@'localhost' does not have the FILE privilege (GRANT FILE on *.* to user@'localhost'); or,
the file you are trying to load does not exist on the machine running mysql server (if using LOAD DATA INFILE); or,
the file you are trying to load does not exist on your local machine (if using LOAD DATA LOCAL INFILE); or,
the file you are trying to load is not world readable (you need the file and all parent directories to be world-readable: chmod 755 directory; and, chmod 744 file.dat)

#' Err 1: Error executing query: Can't get stat of '/var/lib/mysql/phutoan_api/data/component.csv' (Errcode: 13)
#' Err 2:  Error: Error executing query: File 'phutoan_api/data/component.csv' not found (OS errno 2 - No such file or directory)

pool_execute(lime, "SET GLOBAL local_infile=ON;")
The fastest way to load lots of data is using LOAD DATA INFILE.

2. Man in the middle
However, using "LOAD DATA LOCAL INFILE" (ie: loading a file from the client) may be a security problem :
A "man in the middle" proxy server can change the actual file requested from the server so the client will send a local file to this proxy.
if someone can execute a query from the client, he can have access to any file on the client (according to the rights of the user running the client process).
A specific option "allowLocalInfile" (default to true) can deactivate functionality on the client side. The global variable local_infile can disable LOAD DATA LOCAL INFILE on the server side.
}
\note{
1. Version support of MySQL is greater than 3.x
}
\references{
\url{https://dev.mysql.com/doc/refman/8.0/en/load-data.html}
\url{http://www.it-iss.com/mysql/mysql-load-data-infile/}
\url{https://askubuntu.com/questions/1078366/how-to-execute-mysql-commands-in-sh}
\url{https://stackoverflow.com/questions/2221335/access-denied-for-load-data-infile-in-mysql}
\url{https://stackoverflow.com/questions/22859409/error-13-hy000-at-line-1-cant-get-stat-of-errcode-13}
\url{https://bbs.archlinux.org/viewtopic.php?id=227181}
\url{https://dev.mysql.com/doc/refman/8.0/en/load-data-local-security.html}
\url{https://mariadb.com/kb/en/about-mariadb-connector-j/}
\url{https://mariadb.com/kb/en/how-to-quickly-insert-data-into-mariadb/s}
\url{https://unix.stackexchange.com/questions/278184/copy-file-from-user-to-another-in-linux}
}
